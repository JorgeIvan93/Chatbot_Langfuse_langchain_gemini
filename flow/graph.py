"""
flow/graph.py

¬°Bienvenido al mapa de nuestro chatbot! üó∫Ô∏è

Este archivo es como el plano que muestra c√≥mo viaja cada mensaje desde que lo escribes
hasta que recibes una respuesta. Imagina que es como una l√≠nea de metro donde cada
estaci√≥n (nodo) tiene una tarea espec√≠fica.

¬øQu√© necesitamos para construir este mapa?
1. BaseModel: Es como un formulario que nos dice qu√© informaci√≥n guardamos
2. StateGraph: Es nuestro constructor de mapas, viene de la biblioteca LangGraph
3. Los nodos: Son las "estaciones" por donde pasa cada mensaje
"""

from typing import Optional
from pydantic import BaseModel
from langgraph.graph import StateGraph
from flow.nodes import (
    nodo_entrada_runnable,
    nodo_procesador_runnable,
    nodo_respuesta_runnable
)


class EstadoApp(BaseModel):
    """
    Este es como el sobre que lleva la informaci√≥n entre estaciones.
    
    Tiene dos bolsillos:
    - texto: donde guardamos lo que escribe el usuario
    - salida: donde ponemos la respuesta del chatbot (puede estar vac√≠o al inicio)
    """
    texto: str
    salida: Optional[str] = None


def construir_grafo():
    """
    Esta funci√≥n es como armar el mapa del metro: conecta todas las estaciones
    en el orden correcto para que el mensaje sepa por d√≥nde tiene que pasar.
    
    Es como decir:
    1. Empiezas en la estaci√≥n de entrada
    2. Luego vas a la estaci√≥n de procesamiento
    3. Terminas en la estaci√≥n de respuesta
    """

    # Creamos un nuevo mapa usando nuestro sobre especial (EstadoApp)
    grafo = StateGraph(state_schema=EstadoApp)

    # Registramos cada estaci√≥n en el mapa
    grafo.add_node("EstacionEntrada", nodo_entrada_runnable)
    grafo.add_node("EstacionProcesamiento", nodo_procesador_runnable)
    grafo.add_node("EstacionRespuesta", nodo_respuesta_runnable)

    # Dibujamos las l√≠neas que conectan las estaciones
    grafo.set_entry_point("EstacionEntrada")  # Aqu√≠ empieza el viaje
    grafo.add_edge("EstacionEntrada", "EstacionProcesamiento")  # Primera conexi√≥n
    grafo.add_edge("EstacionProcesamiento", "EstacionRespuesta")  # Segunda conexi√≥n

    # El mapa est√° listo para usarse
    return grafo.compile()
